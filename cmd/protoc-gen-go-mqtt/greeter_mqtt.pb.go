// Code generated by protoc-gen-go-mqtt. DO NOT EDIT.
// versions:
// - protoc-gen-go-mqtt v2.6.2
// - protoc             v3.19.4
// source: api/v1/greeter.proto

package main

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	"github.com/luobote55/kratos-transport-rpc/api/v1"
	mqtt "github.com/luobote55/kratos-transport-rpc/transport/mqtt"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(middleware.Middleware)

const _ = mqtt.SupportPackageIsVersion1

//const OperationGreeterSayHello = "/helloworld.v1.Greeter/SayHello"

type GreeterMQTTServer interface {
	// SayHello Sends a greeting
	SayHello(context.Context, *v1.HelloRequest) (*v1.HelloReply, error)
}

func RegisterGreeterMQTTServer(s *mqtt.Server, srv GreeterMQTTServer) {
	r := s.Route("")
	r.REQ("SayHello", _Greeter_SayHello0_MQTT_Handler(srv))
}

func _Greeter_SayHello0_MQTT_Handler(srv GreeterMQTTServer) func(ctx context.Context, req interface{}) (interface{}, error) {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		var in v1.HelloRequest
		//		mqtt.SetOperation(ctx,OperationGreeterSayHello)
		h := middleware.Handler(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*v1.HelloRequest))
		})
		return h(ctx, &in)
	}
}

type GreeterMQTTClient interface {
	SayHello(ctx context.Context, req *v1.HelloRequest) (rsp *v1.HelloReply, err error)
}

type GreeterMQTTClientImpl struct {
	cc *mqtt.Client
}

func NewGreeterMQTTClient(client *mqtt.Client) GreeterMQTTClient {
	return &GreeterMQTTClientImpl{client}
}

func (c *GreeterMQTTClientImpl) SayHello(ctx context.Context, in *v1.HelloRequest) (*v1.HelloReply, error) {
	var out v1.HelloReply
	pattern := "SayHello"
	err := c.cc.Invoke(ctx, "REQ", pattern, in, &out)
	if err != nil {
		return nil, err
	}
	return &out, err
}
