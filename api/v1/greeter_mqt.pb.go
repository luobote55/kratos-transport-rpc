// Code generated by protoc-gen-go-mqtt. DO NOT EDIT.
// versions:
// - protoc-gen-go-mqtt v1.3.0
// - protoc             v3.19.4
// source: api/v1/greeter.proto

package v1

import (
	context "context"
	errors "errors"
	mqtt "github.com/luobote55/kratos-transport-rpc/server/mqtt"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the mqtt package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = mqtt.SupportPackageIsVersion1

const (
	Greeter_SayHello_Mqt_FullMethodName = "/greeter.Greeter/SayHello"
)

// GreeterMqtClient is the client API for Greeter service.
type GreeterMqtClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, topic string, in *HelloRequest, opts ...mqtt.CallOption) (*HelloReply, error)
}

type greeterMqtClient struct {
	cc *mqtt.Client
}

func NewGreeterMqtClient(cc *mqtt.Client) GreeterMqtClient {
	return &greeterMqtClient{cc}
}

func (c *greeterMqtClient) SayHello(ctx context.Context, topic string, in *HelloRequest, opts ...mqtt.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_Mqt_FullMethodName, topic, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterMqtServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterMqtServer
// for forward compatibility
type GreeterMqtServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterMqtServer()
}

// UnimplementedGreeterMqtServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterMqtServer struct {
}

func (UnimplementedGreeterMqtServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, errors.New("method SayHello not implemented")
}
func (UnimplementedGreeterMqtServer) mustEmbedUnimplementedGreeterMqtServer() {}

// UnsafeGreeterMqtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterMqtServer will
// result in compilation errors.
type UnsafeGreeterMqtServer interface {
	mustEmbedUnimplementedGreeterMqtServer()
}

func RegisterGreeterMqtServer(s *mqtt.Server, topic string, srv GreeterMqtServer) {
	r := s.Route("")
	r.REQ(Greeter_SayHello_Mqt_FullMethodName, _Greeter_SayHello_Mqt_Handler(srv))
	r.Route(topic)
}

func _Greeter_SayHello_Mqt_Handler(srv GreeterMqtServer) func(ctx context.Context, req interface{}) (interface{}, error) {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		}
		return handler(ctx, req)
	}
}

const (
	GreeterUpload_Hello_Mqt_FullMethodName = "/greeter.GreeterUpload/Hello"
)

// GreeterUploadMqtClient is the client API for GreeterUpload service.
type GreeterUploadMqtClient interface {
	// Sends a greeting
	Hello(ctx context.Context, topic string, in *HelloRequest, opts ...mqtt.CallOption) (*HelloReply, error)
}

type greeterUploadMqtClient struct {
	cc *mqtt.Client
}

func NewGreeterUploadMqtClient(cc *mqtt.Client) GreeterUploadMqtClient {
	return &greeterUploadMqtClient{cc}
}

func (c *greeterUploadMqtClient) Hello(ctx context.Context, topic string, in *HelloRequest, opts ...mqtt.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, GreeterUpload_Hello_Mqt_FullMethodName, topic, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterUploadMqtServer is the server API for GreeterUpload service.
// All implementations must embed UnimplementedGreeterUploadMqtServer
// for forward compatibility
type GreeterUploadMqtServer interface {
	// Sends a greeting
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterUploadMqtServer()
}

// UnimplementedGreeterUploadMqtServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterUploadMqtServer struct {
}

func (UnimplementedGreeterUploadMqtServer) Hello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, errors.New("method Hello not implemented")
}
func (UnimplementedGreeterUploadMqtServer) mustEmbedUnimplementedGreeterUploadMqtServer() {}

// UnsafeGreeterUploadMqtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterUploadMqtServer will
// result in compilation errors.
type UnsafeGreeterUploadMqtServer interface {
	mustEmbedUnimplementedGreeterUploadMqtServer()
}

func RegisterGreeterUploadMqtServer(s *mqtt.Server, topic string, srv GreeterUploadMqtServer) {
	r := s.Route("")
	r.REQ(GreeterUpload_Hello_Mqt_FullMethodName, _GreeterUpload_Hello_Mqt_Handler(srv))
	r.RouteUpload()
}

func _GreeterUpload_Hello_Mqt_Handler(srv GreeterUploadMqtServer) func(ctx context.Context, req interface{}) (interface{}, error) {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*HelloRequest))
		}
		return handler(ctx, req)
	}
}
